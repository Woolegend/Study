# 24.11.19 TIL

## Global 스타일 적용

글로벌 스타일을 적용할 땐 `_app.js` 파일에 적용하면 된다.

## 파일시스템 기반 라우팅

### 개요

라우팅은 어떤 주소에 어떤 페이지를 보여줄 지 정하는 것이다.

파일시스템 기반 라우팅은 파일의 경로가 주소에 매칭되는 라우팅 방식을 뜻한다.

Next.JS에서는 파일시스템 기반 라우팅을 제공한다.

즉, 폴더를 만들고 JS파일을 만들면 끝이다.

### 페이지 나누기

Next App의 디렉터리 구조는 대충 아래와 같다.

```
📂root
├─ 📂public
├─ 📂pages
│   └─ 📄index.js
├─ 📄next.config.js
├─ ⚙️jsconfig.json
├─ ⚙️package.json
├─ ⚙️tailwind.config.js
└─ 📖README.md
```

페이지를 만들기 위해서는 반드시 `./pages` 에 파일을 만들어야 한다.

`./pages/index.js`는 홈페이지에 해당한다.

만약 `./pages`에 `search.js`라는 파일을 만들어보자

```
📂pages
├─ 📄index.js
└─ 📄search.js
```

이제 검색창에 `localhost:3000/search`에 접속해보면 `search.js`로 만든 페이지를 확인할 수 있다.

중간에 경로를 추가하고 싶다면 폴더를 활용해보자

`search.js`파일을 `/util/search`경로에 보여주고 싶다면 아래와 같이 디렉터리 구조를 만들면 된다.

```
📂pages
├─ 📄index.js
└─ 📂util
    └─ 📄search.js
```

### 동적 라우팅

동적 라우팅은 URL 파라미터에 따라 동적으로 페이지를 라우팅하는 것을 뜻한다.

Next JS는 `[파라미터]`를 디렉토리 작명에 활용해 동적 라우팅을 수행한다.

만약 상품 `id`에 따라 동적 라우팅을 수행한다면 다음과 같이 구현할 수 있다.

```
📂pages
├─ 📄index.js
└─ 📂products
    └─ 📄[id].js
```

`/product/:id`로 접속해보면 페이지가 잘 렌더링 되는 것을 확인할 수 있다.

`[파라미터]`는 파일뿐만 아니라 폴더에도 사용 가능하다.

```
📂pages
├─ 📄index.js
└─ 📂products
    └─ 📂[id]
      └─ 📄index.js
```

## Link Component

Next JS 환경에서는 `a`태그를 사용하는 것을 권장하지 않는다.

아래 두 코드를 느린 네트워크 환경에서 동작해보면 알 수 있다.

```js
// a 태그 사용
function Page() {
  return (
    <ul>
      <li>
        <a href="/products/1">첫 번째 상품</a>
      </li>
      ...
    </ul>
  );
}

// 링크를 클릭한 순간 빈 창이 보인 후 다음 페이지가 렌더링한다.
```

```js
// Link 컴포넌트 사용
function Page() {
  return (
    <ul>
      <li>
        <Link href="/products/1">첫 번째 상품</Link>
      </li>
      ...
    </ul>
  );
}

// 링크를 클릭한 후 빈 창이 보이지 않고 다음 페이지가 렌더링 된다.
```

페이지를 처음부터 렌더링 하는 `a`태그와 달리 `Link`컴포넌트는 필요한 정보만 가져온 후 페이지를 렌더링한다. 이로인해 더 빠르고 공백을 보이지 않는다.

이는 프리렌더링과 연관이 있는데 이는 이후에 다시 다루겠다.

외부 링크의 경우는 `Link`컴포넌트는 `a`태그와 동일하게 동작하기 때문에 따로 구분하지 않고 Next JS 환경에서는 `Link`컴포넌트는만 사용하면 된다.

## useRouter로 쿼리 사용하기

`useRouter`로 URL의 파라미터와 쿼리 파라미터를 얻을 수 있다.

`/products/:id?tag=food` 에서 `id` 파라미터와 `tag` 쿼리 파라미터를 얻을려면 다음과 같이 `useRouter`를 사용하자

```js
import { useRouter } from "next/router";

export default function Product() {
  const router = useRouter();
  const { id, tag } = router.query;
}
```

Router에서 반환된 객체에서는 파라미터와 쿼리 파라미터를 따로 구분하지 않기 때문에 동일한 방식으로 얻을 수 있다.
